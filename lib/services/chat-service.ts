import { makeGraphQLRequest, QUERIES, MUTATIONS } from "../graphql"
import { generateChatTitle, isAutoGeneratedTitle } from "../utils/chat"
import type { Chat, Message } from "../types"

/**
 * Service class for managing chat operations
 * Handles all chat-related GraphQL operations and business logic
 */
export class ChatService {
  /**
   * Loads all chats for the current user, ordered by creation date (newest first)
   * @returns Promise<Chat[]> Array of chat objects
   * @throws Error if GraphQL request fails
   */
  static async loadChats(): Promise<Chat[]> {
    try {
      const data = await makeGraphQLRequest(QUERIES.GET_CHATS)
      return data.chats
    } catch (error) {
      console.error("Error loading chats:", error)
      throw new Error("Failed to load chats")
    }
  }

  /**
   * Loads all messages for a specific chat, ordered chronologically
   * @param chatId - UUID of the chat to load messages for
   * @returns Promise<Message[]> Array of message objects
   * @throws Error if GraphQL request fails
   */
  static async loadMessages(chatId: string): Promise<Message[]> {
    try {
      const data = await makeGraphQLRequest(QUERIES.GET_MESSAGES, { chat_id: chatId })
      return data.messages
    } catch (error) {
      console.error("Error loading messages:", error)
      throw new Error("Failed to load messages")
    }
  }

  /**
   * Creates a new chat with an auto-generated or custom title
   * @param firstMessage - Optional first message to generate title from
   * @returns Promise<string | null> The new chat ID or null if creation failed
   */
  static async createNewChat(firstMessage?: string): Promise<string | null> {
    try {
      const chatTitle = generateChatTitle(firstMessage || "")
      const data = await makeGraphQLRequest(MUTATIONS.CREATE_CHAT, { title: chatTitle })
      return data.insert_chats_one.id
    } catch (error) {
      console.error("Error creating chat:", error)
      return null
    }
  }

  /**
   * Updates the title of an existing chat
   * @param chatId - UUID of the chat to update
   * @param title - New title for the chat
   * @throws Error if GraphQL request fails
   */
  static async updateChatTitle(chatId: string, title: string): Promise<void> {
    try {
      await makeGraphQLRequest(MUTATIONS.UPDATE_CHAT_TITLE, { id: chatId, title })
    } catch (error) {
      console.error("Error updating chat title:", error)
      throw new Error("Failed to update chat title")
    }
  }

  /**
   * Determines if a chat title should be auto-updated based on the first message
   * @param chat - Chat object to check
   * @param firstMessage - The first user message in the chat
   * @returns boolean - True if the title should be updated
   */
  static shouldUpdateTitle(chat: Chat, firstMessage: string): boolean {
    return chat && isAutoGeneratedTitle(chat.title) && firstMessage.trim().length > 0
  }
}
