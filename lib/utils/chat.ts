import { MESSAGE_LIMITS } from "../constants"

/**
 * Generates an AI-powered chat title using Gemini API
 * Falls back to rule-based generation if API is unavailable
 */
export const generateChatTitle = async (firstMessage: string): Promise<string> => {
  if (!firstMessage?.trim()) {
    console.log('[Chat] No message provided, using timestamp title')
    return `Chat ${new Date().toLocaleTimeString()}`
  }

  try {
    console.log('[Chat] Calling API to generate title for:', firstMessage.substring(0, 50) + '...')
    
    // Call our API route to generate AI title
    const response = await fetch('/api/generate-title', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message: firstMessage }),
    })

    console.log('[Chat] API response status:', response.status)

    if (response.ok) {
      const { title } = await response.json()
      console.log('[Chat] Received title from API:', title)
      if (title && title.trim()) {
        console.log('[AI] Generated title:', title)
        return title.trim()
      }
    } else {
      const errorData = await response.json()
      console.warn('[Chat] Title generation failed:', errorData)
    }
  } catch (error) {
    console.error('[Chat] Error generating title:', error)
  }

  // Fallback to rule-based generation
  console.log('[Chat] Using fallback title generation')
  return generateFallbackTitle(firstMessage)
}

/**
 * Fallback title generation using rules
 */
export const generateFallbackTitle = (firstMessage: string): string => {
  if (!firstMessage?.trim()) {
    return `Chat ${new Date().toLocaleTimeString()}`
  }

  let cleanMessage = firstMessage.trim()

  const prefixesToRemove = [
    "can you",
    "could you",
    "would you",
    "will you",
    "please",
    "help me",
    "i need",
    "how do i",
    "what is",
    "what are",
    "tell me",
    "explain",
    "show me",
  ]

  const lowerMessage = cleanMessage.toLowerCase()
  for (const prefix of prefixesToRemove) {
    if (lowerMessage.startsWith(prefix)) {
      cleanMessage = cleanMessage.substring(prefix.length).trim()
      break
    }
  }

  if (cleanMessage.length > 0) {
    cleanMessage = cleanMessage.charAt(0).toUpperCase() + cleanMessage.slice(1)
  }

  if (cleanMessage.length > MESSAGE_LIMITS.TITLE_MAX_LENGTH) {
    const truncated = cleanMessage.substring(0, MESSAGE_LIMITS.TITLE_MAX_LENGTH)
    const lastSpaceIndex = truncated.lastIndexOf(" ")

    if (lastSpaceIndex > MESSAGE_LIMITS.TITLE_MAX_LENGTH * 0.7) {
      return truncated.substring(0, lastSpaceIndex) + "..."
    }
    return truncated + "..."
  }

  return cleanMessage
}

/**
 * Checks if a chat title is auto-generated and should be replaced
 */
export const isAutoGeneratedTitle = (title: string): boolean => {
  return (
    title.startsWith("Chat ") && title.includes(":") ||
    title === "Generating title..." ||
    title.trim() === ""
  )
}

/**
 * Generates a title using AI/API if available, falls back to smart generation
 */
export const generateSmartChatTitle = async (firstMessage: string): Promise<string> => {
  // In the future, this could call an AI service for even better titles
  return generateChatTitle(firstMessage)
}
