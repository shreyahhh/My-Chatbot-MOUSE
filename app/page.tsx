"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { useAuthenticationStatus, useUserData, useSignOut } from "@nhost/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, MessageCircle, LogOut, Sun, Moon, MessageSquare, Sparkles, Brain, CheckCircle, X, Edit2, Trash2, MoreHorizontal, FileText, Mail, Github, Eye, EyeOff, Paperclip } from "lucide-react"
import Link from "next/link"
import Image from "next/image"

import { STORAGE_KEYS } from "@/lib/constants"
import { makeGraphQLRequest, QUERIES, MUTATIONS } from "@/lib/graphql"
import { generateChatTitle, isAutoGeneratedTitle } from "@/lib/utils/chat"
import { MessageBubble } from "@/components/chat/message-bubble"
import { TypingIndicator } from "@/components/chat/typing-indicator"
import { MouseRunningAnimation } from "@/components/ui/mouse-running-animation"
import { AuthForm } from "@/components/auth/auth-form"
import type { Message, Chat } from "@/lib/types"

// Typing animation component for empty chat
const TypingAnimation = ({ messages, onComplete }: { messages: string[], onComplete: () => void }) => {
  const [displayedText, setDisplayedText] = useState("");
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [isTyping, setIsTyping] = useState(true);
  const [showCursor, setShowCursor] = useState(true);

  useEffect(() => {
    if (currentMessageIndex >= messages.length) {
      onComplete();
      return;
    }

    const currentMessage = messages[currentMessageIndex];
    let currentCharIndex = 0;
    
    // Typing effect
    const typeChar = () => {
      if (currentCharIndex <= currentMessage.length) {
        setDisplayedText(currentMessage.substring(0, currentCharIndex));
        currentCharIndex++;
        setTimeout(typeChar, Math.random() * 30 + 30); // Random typing speed
      } else {
        // Pause before deleting
        setTimeout(() => {
          setIsTyping(false);
          
          // Delete effect
          const deleteChar = () => {
            if (currentCharIndex >= 0) {
              setDisplayedText(currentMessage.substring(0, currentCharIndex));
              currentCharIndex--;
              setTimeout(deleteChar, 20); // Faster deletion
            } else {
              // Move to next message
              setCurrentMessageIndex(prev => prev + 1);
              setIsTyping(true);
            }
          };
          
          // Only delete if not the last message
          if (currentMessageIndex < messages.length - 1) {
            setTimeout(deleteChar, 1000);
          } else {
            // For the last message, keep it displayed
            onComplete();
          }
        }, 2000); // Pause before deleting
      }
    };

    const typingTimer = setTimeout(typeChar, 500); // Initial delay
    
    // Cursor blink effect
    const cursorInterval = setInterval(() => {
      setShowCursor(prev => !prev);
    }, 500);

    return () => {
      clearTimeout(typingTimer);
      clearInterval(cursorInterval);
    };
  }, [currentMessageIndex, messages, onComplete]);

  return (
    <div className="bg-muted/50 dark:bg-muted/20 rounded-lg p-4 max-w-2xl mx-auto text-center">
      <div className="inline-flex items-center">
        <span className="text-muted-foreground">
          {displayedText}
          <span className={`inline-block w-2 h-6 bg-primary ml-1 transition-opacity ${showCursor && isTyping ? 'opacity-100' : 'opacity-0'}`}></span>
        </span>
      </div>
    </div>
  );
};

// MouseAI Animation Component
const MouseAIIntroAnimation = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [emailText, setEmailText] = useState("");
  const [passwordText, setPasswordText] = useState("");
  const [userMessage, setUserMessage] = useState("");
  const [aiResponse, setAiResponse] = useState("");
  const [isMouseRunning, setIsMouseRunning] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  // Mouse icon - only using mouse3-nobg
  const MouseIcon = ({ className }: { className: string }) => {
    return (
      <Image 
        src="/mouse3-nobg.png"
        alt="MouseAI" 
        width={100}
        height={100}
        className={className}
        onError={(e) => {
          // Fallback to a simple div if image fails to load
          e.currentTarget.style.display = 'none';
        }}
      />
    );
  };

  useEffect(() => {
    const typeText = async (text: string, setter: React.Dispatch<React.SetStateAction<string>>, delay = 60) => {
        for (let i = 0; i <= text.length; i++) {
            setter(text.slice(0, i));
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    };
    
    const runSequence = async () => {
      // Reset everything for the loop
      setCurrentStep(0);
      setEmailText("");
      setPasswordText("");
      setUserMessage("");
      setAiResponse("");
      setIsMouseRunning(false);
      setShowPassword(false);

      // Step 1: Logo appears
      setTimeout(() => setCurrentStep(1), 800);
      
      // Step 2: Title appears
      setTimeout(() => setCurrentStep(2), 2000);
      
      // Step 3: Login window slides in, and title fades out for a smooth transition
      setTimeout(() => setCurrentStep(3), 4000);
      
      // Step 4: Mock email typing
      setTimeout(async () => {
        setCurrentStep(4);
        await typeText("user@example.com", setEmailText, 80);
      }, 5000);
      
      // Step 5: Mock password typing
      setTimeout(async () => {
        const password = "password123";
        for (let i = 0; i <= password.length; i++) {
          setPasswordText("•".repeat(i));
          await new Promise(resolve => setTimeout(resolve, 60));
        }
      }, 6500);
      
      // Step 6: Click sign in button
      setTimeout(() => {
        setCurrentStep(5);
      }, 8000);
      
      // Step 7: Show chat text bar
      setTimeout(() => {
        setCurrentStep(6);
      }, 9000);
      
      // Step 8: Mimic user typing a message
      setTimeout(async () => {
        setCurrentStep(7);
        await typeText("What is Artificial Intelligence?", setUserMessage);
      }, 10000);
      
      // Step 9: Typing is done, send button turns green
      setTimeout(() => {
        setCurrentStep(8);
      }, 12000);

      // Step 10: User message appears, input bar slides up and disappears, bot starts "thinking"
      setTimeout(() => {
        setCurrentStep(9);
        setIsMouseRunning(true);
        
        // Step 11: Show the AI's response after a delay
        setTimeout(() => {
          setIsMouseRunning(false);
          setAiResponse("Artificial Intelligence (AI) is the simulation of human intelligence processes by machines, especially computer systems. These processes include learning, reasoning, and self-correction.");
          setCurrentStep(10);
        }, 4000);
      }, 12500);
      
      // Reset and restart the entire sequence
      setTimeout(() => {
        runSequence();
      }, 20000);
    };

    runSequence();
  }, []);

  return (
    <div className="w-full h-full flex items-center justify-center overflow-hidden">
      <div className="w-full max-w-4xl mx-auto px-8 relative h-96 flex items-center justify-center">
        
        {/* Logo and Title Section - Fades out smoothly */}
        <div className={`absolute inset-0 flex flex-col items-center justify-center transition-opacity duration-500 ease-out ${currentStep >= 3 ? 'opacity-0' : 'opacity-100'}`}>
            {/* Logo Animation */}
            <div className={`transition-all duration-1000 ease-out ${
              currentStep >= 1 
                ? 'opacity-100 scale-100 translate-y-0' 
                : 'opacity-0 scale-50 translate-y-8'
            }`}>
              <div className="w-24 h-24 mb-8">
                <MouseIcon className="w-full h-full drop-shadow-lg" />
              </div>
            </div>
            
            {/* Title Animation */}
            <div className={`transition-all duration-1000 ease-out delay-500 ${
              currentStep >= 2 
                ? 'opacity-100 translate-y-0' 
                : 'opacity-0 translate-y-4'
            }`}>
              <h1 className="text-5xl font-bold text-gray-900 text-center tracking-tight">
                MouseAI
              </h1>
              <div className="h-1 w-20 bg-black mx-auto mt-4 rounded-full"></div>
            </div>
        </div>
        
        {/* Login Demo Window - Slides up smoothly, no shadow */}
        {currentStep >= 3 && currentStep < 6 && (
          <div className="flex items-center justify-center h-full">
            <div className={`bg-white rounded-2xl p-8 w-full max-w-sm border border-gray-100 transition-all duration-1500 ease-out ${
              currentStep >= 3 
                ? 'opacity-100 scale-100 translate-y-0' 
                : 'opacity-0 scale-95 translate-y-12'
            }`}>
              
              {/* Email Field */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                <input
                  type="email"
                  value={emailText}
                  placeholder="Enter your email"
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200"
                  readOnly
                />
              </div>
              
              {/* Password Field */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    value={showPassword ? "password123" : passwordText}
                    placeholder="Enter your password"
                    className="w-full px-4 py-3 pr-12 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200"
                    readOnly
                  />
                  <button
                    type="button"
                    className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>
              
              {/* Sign In Button */}
              <button className={`w-full py-3 px-4 rounded-xl text-white font-medium transition-all duration-300 ${
                currentStep >= 5 
                  ? 'bg-green-600 transform scale-105 shadow-lg' 
                  : 'bg-black hover:bg-gray-800 shadow-md'
              }`}>
                {currentStep >= 5 ? '✓ Welcome!' : 'Sign in'}
              </button>
            </div>
          </div>
        )}
        
        {/* Chat Demo Interface */}
        {currentStep >= 6 && (
          <div className={`w-full max-w-4xl transition-all duration-1000 ease-out flex flex-col justify-center ${
            currentStep >= 6 
              ? 'opacity-100 scale-100' 
              : 'opacity-0 scale-95'
          }`}>
            
            {/* Text Input Bar - Slides up and disappears after sending */}
            <div className={`flex justify-center transition-all duration-700 ease-in-out ${currentStep >= 9 ? 'opacity-0 -translate-y-20 h-0' : 'opacity-100 translate-y-0 h-24'}`}>
              <div className="flex space-x-3 w-full max-w-2xl items-center">
                <input
                  type="text"
                  placeholder="Ask me anything..."
                  className="flex-1 border border-gray-300 rounded-2xl px-6 py-4 text-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 shadow-sm"
                  value={currentStep >= 7 ? userMessage : ''}
                  readOnly
                />
                <button className={`text-white p-4 rounded-2xl transition-all duration-300 shadow-sm ${
                  currentStep >= 8 
                    ? 'bg-green-600 transform scale-105' 
                    : 'bg-black hover:bg-gray-800'
                }`}>
                  <Send className="w-6 h-6" />
                </button>
              </div>
            </div>
            
            {/* Messages Area - Slides up to fill space */}
            <div className={`transition-transform duration-700 ease-in-out ${currentStep >= 9 ? '-translate-y-24' : 'translate-y-0'}`}>
              {currentStep >= 9 && (
                <div className="space-y-6 max-w-4xl mx-auto animate-slide-up">
                  
                  {/* User Message */}
                  <div className="flex justify-end animate-slide-in">
                    <div className="bg-black text-white rounded-2xl px-6 py-4 max-w-2xl shadow-sm">
                      <p className="text-lg">{userMessage}</p>
                    </div>
                  </div>
                  
                  {/* AI Response with Mouse Icon */}
                  <div className="flex items-start space-x-4">
                    <div className="w-12 h-12 flex-shrink-0 mt-2">
                      <MouseIcon 
                        className={`w-full h-full transition-all duration-300 ${
                          isMouseRunning ? 'animate-pulse' : ''
                        }`}
                      />
                    </div>
                    <div className="flex-1">
                      {currentStep >= 10 ? (
                        <div className="bg-gray-100 rounded-2xl px-6 py-4 animate-fade-in shadow-sm">
                          <p className="text-lg text-gray-900 leading-relaxed">{aiResponse}</p>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3 text-gray-500 mt-4">
                          <div className="flex space-x-1">
                            <div className="w-3 h-3 bg-gray-400 rounded-full animate-bounce"></div>
                            <div className="w-3 h-3 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-3 h-3 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                          <span className="text-lg">MouseAI is thinking...</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        @keyframes fade-in {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slide-in {
          from { opacity: 0; transform: translateX(20px); }
          to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes slide-up {
          from { opacity: 0; transform: translateY(30px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-fade-in {
          animation: fade-in 0.6s ease-out;
        }
        
        .animate-slide-in {
          animation: slide-in 0.4s ease-out;
        }
        
        .animate-slide-up {
          animation: slide-up 0.6s ease-out;
        }
      `}</style>
    </div>
  );
};

export default function ChatApp() {
  const [messages, setMessages] = useState<Message[]>([])
  const [chats, setChats] = useState<Chat[]>([])
  const [currentChatId, setCurrentChatId] = useState<string>("")
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [mounted, setMounted] = useState(false)
  const [isDarkMode, setIsDarkMode] = useState(false) // Default state is light mode
  const [editingChatId, setEditingChatId] = useState<string>("")
  const [editingChatTitle, setEditingChatTitle] = useState("")
  const [deletingChatId, setDeletingChatId] = useState<string>("")
  const [deletingChatTitle, setDeletingChatTitle] = useState("")
  const [typingAnimationComplete, setTypingAnimationComplete] = useState(false);
  const [showTypingAnimation, setShowTypingAnimation] = useState(true);
  
  const typingMessages = [
    "Hello, how can I help you today?",
    "Help me write a story on a robot"
  ];

  const { isAuthenticated, isLoading: authLoading } = useAuthenticationStatus()
  const user = useUserData()
  const { signOut } = useSignOut()

  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setMounted(true)
  }, [])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(scrollToBottom, [messages])

  useEffect(() => {
    if (isAuthenticated && user) {
      loadChats()
    }
  }, [isAuthenticated, user])

  // --- START: CONSOLIDATED THEME MANAGEMENT ---
  useEffect(() => {
    if (!mounted) return; // Wait for the component to mount to avoid hydration errors

    if (!isAuthenticated) {
      // ALWAYS set light mode for the login page
      document.documentElement.classList.remove('dark');
      setIsDarkMode(false);
    } else {
      // User is logged in, check their saved preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark');
        setIsDarkMode(true);
      } else {
        // Default to light mode if no theme is saved
        document.documentElement.classList.remove('dark');
        setIsDarkMode(false);
      }
    }
  }, [isAuthenticated, mounted]);
  
  const toggleTheme = () => {
    const newIsDarkMode = !isDarkMode;
    setIsDarkMode(newIsDarkMode);
    if (newIsDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  };
  // --- END: CONSOLIDATED THEME MANAGEMENT ---

  useEffect(() => {
    if (!currentChatId) {
      setShowTypingAnimation(true);
      setTypingAnimationComplete(false);
    }
  }, [currentChatId]);

  const loadChats = async () => {
    try {
      const data = await makeGraphQLRequest(QUERIES.GET_CHATS)
      setChats(data.chats)
      if (!currentChatId && data.chats.length > 0) {
        setCurrentChatId(data.chats[0].id)
        loadMessages(data.chats[0].id)
      }
    } catch (error) {
      console.error("Error loading chats:", error)
    }
  }

  const loadMessages = async (chatId: string) => {
    try {
      const data = await makeGraphQLRequest(QUERIES.GET_MESSAGES, { chat_id: chatId })
      setMessages(data.messages || [])
    } catch (error) {
      console.error("Error loading messages:", error)
      setMessages([])
    }
  }

  const createNewChat = async (firstMessage?: string) => {
    try {
      const placeholderTitle = firstMessage ? "Generating title..." : `Chat ${new Date().toLocaleTimeString()}`
      const data = await makeGraphQLRequest(MUTATIONS.CREATE_CHAT, { title: placeholderTitle })
      const newChat = data.insert_chats_one
      setChats((prev) => [newChat, ...prev])
      setCurrentChatId(newChat.id)
      setMessages([])
      if (firstMessage) {
        generateChatTitleAsync(newChat.id, firstMessage)
      }
      return newChat.id
    } catch (error) {
      console.error("Error creating chat:", error)
      return null
    }
  }

  const generateChatTitleAsync = async (chatId: string, firstMessage: string) => {
    try {
      const aiTitle = await generateChatTitle(firstMessage)
      if (aiTitle && aiTitle.trim() !== "") {
        await updateChatTitle(chatId, aiTitle)
      } else {
        const fallbackTitle = firstMessage.substring(0, 30) + (firstMessage.length > 30 ? "..." : "")
        await updateChatTitle(chatId, fallbackTitle)
      }
    } catch (error) {
      console.error("Error in async title generation:", error)
      const fallbackTitle = firstMessage.substring(0, 30) + (firstMessage.length > 30 ? "..." : "")
      await updateChatTitle(chatId, fallbackTitle)
    }
  }

  const updateChatTitle = async (chatId: string, title: string) => {
    try {
      await makeGraphQLRequest(MUTATIONS.UPDATE_CHAT_TITLE, { id: chatId, title })
      setChats((prev) => prev.map((chat) => (chat.id === chatId ? { ...chat, title } : chat)))
    } catch (error) {
      console.error("Error updating chat title:", error)
    }
  }

  const deleteChat = async (chatId: string) => {
    try {
      await makeGraphQLRequest(MUTATIONS.DELETE_CHAT, { id: chatId })
      setChats((prev) => prev.filter((chat) => chat.id !== chatId))
      if (currentChatId === chatId) {
        setCurrentChatId("")
        setMessages([])
      }
    } catch (error) {
      console.error("Error deleting chat:", error)
    }
  }

  const startEditingChat = (chatId: string, currentTitle: string) => {
    setEditingChatId(chatId)
    setEditingChatTitle(currentTitle)
  }

  const saveEditedChatTitle = async () => {
    if (!editingChatTitle.trim()) return
    await updateChatTitle(editingChatId, editingChatTitle.trim())
    setEditingChatId("")
    setEditingChatTitle("")
  }

  const cancelEditingChat = () => {
    setEditingChatId("")
    setEditingChatTitle("")
  }

  const showDeleteConfirmation = (chatId: string, chatTitle: string) => {
    setDeletingChatId(chatId)
    setDeletingChatTitle(chatTitle)
  }

  const confirmDeleteChat = async () => {
    if (deletingChatId) {
      await deleteChat(deletingChatId)
      setDeletingChatId("")
      setDeletingChatTitle("")
    }
  }

  const cancelDeleteChat = () => {
    setDeletingChatId("")
    setDeletingChatTitle("")
  }

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return
    setIsLoading(true)
    const userMessage = inputMessage.trim()
    setInputMessage("")
    let activeChatId = currentChatId
    if (!activeChatId) {
      activeChatId = await createNewChat(userMessage)
      if (!activeChatId) {
        setIsLoading(false)
        return
      }
    }
    try {
      const userMessageResult = await makeGraphQLRequest(MUTATIONS.INSERT_MESSAGE, {
        chat_id: activeChatId,
        content: userMessage,
        role: 'user'
      })
      const userMsg = userMessageResult.insert_messages_one || {
        id: `user-${Date.now()}`,
        content: userMessage,
        role: "user",
        created_at: new Date().toISOString(),
      }
      setMessages((prev) => [...prev, userMsg])
      const query = `mutation SendMessage { sendMessage(chat_id: "${activeChatId}", message: "${userMessage.replace(/"/g, '\\"')}") { id chat_id content role created_at } }`
      const result = await makeGraphQLRequest(query)
      if (!result?.sendMessage) {
        throw new Error("Invalid response structure from server")
      }
      const botResponse = { ...result.sendMessage, content: result.sendMessage.content?.trim() || "" }
      setMessages((prev) => [...prev, botResponse])
      const currentChat = chats.find((chat) => chat.id === activeChatId)
      if (currentChat && (isAutoGeneratedTitle(currentChat.title) || messages.length === 1)) {
        generateChatTitleAsync(activeChatId, userMessage)
      }
    } catch (error) {
      console.error("Error sending message:", error)
      const errorMsg: Message = {
        id: `error-${Date.now()}`,
        content: "Sorry, there was an error sending your message. Please try again.",
        role: "assistant",
        created_at: new Date().toISOString(),
      }
      setMessages((prev) => [...prev, errorMsg])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const handleLogout = async () => {
    await signOut()
    setMessages([])
    setChats([])
    setCurrentChatId("")
  }

  if (!mounted || authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading...</p>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return (
      <>
        <div className="min-h-screen relative overflow-hidden bg-white">
          <div 
            className="absolute inset-0 z-0"
            style={{
              background: `radial-gradient(circle, #e5e7eb 0.8px, transparent 0.8px)`,
              backgroundSize: '18px 18px',
              backgroundPosition: '0 0'
            }}
          />
          
          <div className="absolute top-0 left-0 right-0 z-30 bg-white/95 backdrop-blur-md border-b border-gray-200">
            <div className="flex items-center justify-between p-6">
              <div className="flex items-center gap-3">
                <Image
                  src="/mouse3-nobg.png"
                  alt="MouseAI"
                  width={32}
                  height={32}
                  className="w-8 h-8 object-contain"
                  onError={(e) => { e.currentTarget.style.display = 'none'; }}
                />
                <h1 className="text-xl font-bold text-gray-900">MouseAI</h1>
              </div>
              
              <Link href="/docs">
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="w-12 h-12 rounded-full hover:bg-gray-100 transition-colors"
                  title="Documentation"
                >
                  <FileText className="w-6 h-6 text-gray-900" />
                </Button>
              </Link>
            </div>
          </div>

          <div className="flex min-h-screen items-center relative z-10">
            <div className="flex-1 flex items-center justify-center p-8">
              <MouseAIIntroAnimation />
            </div>

            <div className="flex-1 flex items-center justify-center p-8">
              <AuthForm onSuccess={() => console.log("Authentication successful!")} />
            </div>
          </div>
          
          <div className="relative z-20">
            <MouseRunningAnimation />
          </div>
        </div>
      </>
    )
  }

  return (
    <>
      {deletingChatId && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
          <div className="bg-background/95 backdrop-blur-md border rounded-lg p-6 max-w-md mx-4 shadow-lg relative z-60">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-full bg-red-100 dark:bg-red-900/20 flex items-center justify-center">
                  <Trash2 className="w-6 h-6 text-red-600 dark:text-red-400" />
                </div>
                <h3 className="text-lg font-semibold">Delete Chat</h3>
              </div>
              <Button 
                variant="ghost" 
                size="icon"
                onClick={cancelDeleteChat}
                className="h-8 w-8"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            <div className="space-y-3">
              <p className="text-muted-foreground">
                Are you sure you want to delete this chat?
              </p>
              <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-md p-3">
                <p className="text-sm text-amber-800 dark:text-amber-200">
                  <strong>"{deletingChatTitle}"</strong>
                </p>
                <p className="text-xs text-amber-700 dark:text-amber-300 mt-1">
                  ⚠️ This action cannot be undone. All messages will be permanently deleted.
                </p>
              </div>
            </div>
            <div className="flex justify-end gap-2 mt-6">
              <Button 
                variant="outline" 
                onClick={cancelDeleteChat}
                className="px-4"
              >
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={confirmDeleteChat}
                className="px-4"
              >
                Delete Chat
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="flex h-screen bg-background">
      <div className="w-80 border-r bg-card flex flex-col">
        <div className="p-4 border-b">
          <div className="flex justify-between items-center mb-4">
            <h2 className="font-semibold">mouseAI</h2>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon" onClick={toggleTheme} title="Toggle Theme">
                {isDarkMode ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
              </Button>
            </div>
          </div>
          <Button onClick={() => createNewChat()} className="w-full">
            <MessageCircle className="w-4 h-4 mr-2" />
            New Chat
          </Button>
        </div>
        <ScrollArea className="flex-1">
          <div className="p-2">
            {chats.map((chat) => (
              <div
                key={chat.id}
                className={`group relative mb-1 rounded-md hover:bg-accent ${
                  currentChatId === chat.id ? 'bg-secondary' : ''
                }`}
              >
                {editingChatId === chat.id ? (
                  <div className="flex items-center gap-2 p-3">
                    <Input
                      value={editingChatTitle}
                      onChange={(e) => setEditingChatTitle(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') saveEditedChatTitle()
                        else if (e.key === 'Escape') cancelEditingChat()
                      }}
                      className="flex-1 h-8"
                      autoFocus
                    />
                    <Button size="sm" variant="ghost" onClick={saveEditedChatTitle} className="h-8 w-8 p-0">
                      <CheckCircle className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="ghost" onClick={cancelEditingChat} className="h-8 w-8 p-0">
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  <div className="flex items-center">
                    <Button
                      variant="ghost"
                      className="flex-1 justify-start h-auto p-3 text-left"
                      onClick={() => {
                        setCurrentChatId(chat.id)
                        loadMessages(chat.id)
                      }}
                    >
                      <div className="flex-1">
                        <div className="font-medium truncate flex items-center gap-2">
                          {chat.title}
                          {chat.title === "Generating title..." && (
                            <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-primary"></div>
                          )}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {new Date(chat.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    </Button>
                    
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1 pr-2">
                      <Button size="sm" variant="ghost" onClick={(e) => { e.stopPropagation(); startEditingChat(chat.id, chat.title) }} className="h-8 w-8 p-0" title="Edit chat name">
                        <Edit2 className="h-3 w-3" />
                      </Button>
                      <Button size="sm" variant="ghost" onClick={(e) => { e.stopPropagation(); showDeleteConfirmation(chat.id, chat.title) }} className="h-8 w-8 p-0 text-destructive hover:text-destructive" title="Delete chat">
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>
        
        <div className="p-4 border-t">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
              <span className="text-primary-foreground font-medium text-sm">
                {user?.displayName?.charAt(0).toUpperCase() || user?.email?.charAt(0).toUpperCase() || 'U'}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <div className="text-sm font-extrabold truncate">
                {user?.displayName || user?.email?.split('@')[0] || 'User'}
              </div>
              <div className="text-xs text-muted-foreground truncate">
                {user?.email}
              </div>
            </div>
            <Button variant="ghost" size="icon" onClick={handleLogout} title="Logout" className="ml-2">
              <LogOut className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      <div className="flex-1 flex flex-col">
        {currentChatId ? (
          <>
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <MessageBubble key={message.id} message={message} />
                ))}
                {isLoading && <TypingIndicator />}
                {messages.length === 0 && showTypingAnimation && (
                  <TypingAnimation 
                    messages={typingMessages} 
                    onComplete={() => {
                      setTypingAnimationComplete(true);
                      setShowTypingAnimation(false);
                    }} 
                  />
                )}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            <div className="border-t p-4">
              <div className="flex gap-2 items-center">
                <Button 
                  type="button" 
                  variant="ghost" 
                  size="icon" 
                  className="h-10 w-10 text-muted-foreground hover:text-foreground"
                  title="Attach files"
                  onClick={() => console.log('Attach files clicked')}
                >
                  <Paperclip className="h-5 w-5" />
                </Button>
                <div className="flex-1 flex gap-2">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Type your message..."
                    disabled={isLoading}
                    className="flex-1"
                  />
                  <Button 
                    onClick={sendMessage} 
                    disabled={isLoading || !inputMessage.trim()} 
                    size="icon"
                    className="flex-shrink-0"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center max-w-4xl mx-auto px-8">
              <div className="mb-12">
                <div className="w-16 h-16 mx-auto mb-6 rounded-2xl bg-primary flex items-center justify-center">
                  <MessageCircle className="w-8 h-8 text-primary-foreground" />
                </div>
                <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
                  mouseAI
                </h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                  Your intelligent AI companion for conversations, creativity, and problem-solving. Start a new chat to begin your journey.
                </p>
              </div>

              <div className="grid md:grid-cols-3 gap-6 mb-12">
                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <MessageSquare className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Natural Conversations</h3>
                    <p className="text-muted-foreground text-sm">
                      Chat naturally with advanced AI that understands context and nuance
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <Sparkles className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Creative Solutions</h3>
                    <p className="text-muted-foreground text-sm">
                      Get help with creative writing, brainstorming, and problem-solving
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <Brain className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Intelligent Responses</h3>
                    <p className="text-muted-foreground text-sm">
                      Receive thoughtful, accurate responses powered by cutting-edge AI
                    </p>
                  </CardContent>
                </Card>
              </div>

              <Button size="lg" onClick={() => createNewChat()} className="px-8 py-3 text-lg">
                Start New Conversation
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
    </>
  )
}