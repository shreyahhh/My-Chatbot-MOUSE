"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { useAuthenticationStatus, useUserData, useSignInEmailPassword, useSignUpEmailPassword, useSignOut } from "@nhost/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, MessageCircle, LogOut, Sun, Moon, MessageSquare, Sparkles, Brain, CheckCircle, X, Edit2, Trash2, MoreHorizontal, FileText } from "lucide-react"
import Link from "next/link"
import Image from "next/image"

import { STORAGE_KEYS } from "@/lib/constants"
import { makeGraphQLRequest, QUERIES, MUTATIONS } from "@/lib/graphql"
import { generateChatTitle, isAutoGeneratedTitle } from "@/lib/utils/chat"
import { MessageBubble } from "@/components/chat/message-bubble"
import { TypingIndicator } from "@/components/chat/typing-indicator"
import { MouseRunningAnimation } from "@/components/ui/mouse-running-animation"
import type { Message, Chat } from "@/lib/types"

export default function ChatApp() {
  const [messages, setMessages] = useState<Message[]>([])
  const [chats, setChats] = useState<Chat[]>([])
  const [currentChatId, setCurrentChatId] = useState<string>("")
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [mounted, setMounted] = useState(false)
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const [editingChatId, setEditingChatId] = useState<string>("")
  const [editingChatTitle, setEditingChatTitle] = useState("")
  const [deletingChatId, setDeletingChatId] = useState<string>("")
  const [deletingChatTitle, setDeletingChatTitle] = useState("")

  // NHost authentication
  const { isAuthenticated, isLoading: authLoading } = useAuthenticationStatus()
  const user = useUserData()
  const { signInEmailPassword, isLoading: signInLoading, error: signInError } = useSignInEmailPassword()
  const { signUpEmailPassword, isLoading: signUpLoading, error: signUpError } = useSignUpEmailPassword()
  const { signOut } = useSignOut()

  // Form state
  const [isLogin, setIsLogin] = useState(true)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [name, setName] = useState("")

  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Fix hydration by ensuring client-side only rendering after mount
  useEffect(() => {
    setMounted(true)
  }, [])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isAuthenticated && user) {
      console.log("[NHost] User authenticated:", user)
      loadChats()
    }
  }, [isAuthenticated, user])

  // Debug NHost connection
  useEffect(() => {
    console.log("[NHost] Client configuration:")
    console.log("- Subdomain:", process.env.NEXT_PUBLIC_NHOST_SUBDOMAIN)
    console.log("- Region:", process.env.NEXT_PUBLIC_NHOST_REGION)
    console.log("- Auth status:", isAuthenticated)
    console.log("- Auth loading:", authLoading)
    
    if (signInError) {
      console.error("[NHost] Sign in error:", signInError)
    }
    if (signUpError) {
      console.error("[NHost] Sign up error:", signUpError)
    }
  }, [isAuthenticated, authLoading, signInError, signUpError])

  const loadChats = async () => {
    try {
      console.log("[v0] Loading chats...")
      const data = await makeGraphQLRequest(QUERIES.GET_CHATS)
      setChats(data.chats)

      if (!currentChatId && data.chats.length > 0) {
        setCurrentChatId(data.chats[0].id)
        loadMessages(data.chats[0].id)
      }
    } catch (error) {
      console.error("[v0] Error loading chats:", error)
    }
  }

  const loadMessages = async (chatId: string) => {
    try {
      console.log("[Chat] Loading complete history for chat:", chatId)
      
      const data = await makeGraphQLRequest(QUERIES.GET_MESSAGES, { chat_id: chatId })
      
      if (data.messages) {
        // Ensure both user and assistant messages are properly formatted
        const formattedMessages = data.messages.map((msg: any) => ({
          id: msg.id,
          content: msg.content,
          role: msg.role, // This should be either "user" or "assistant"
          created_at: msg.created_at
        }))

        console.log("[Chat] Loaded", formattedMessages.length, "messages:", formattedMessages)
        setMessages(formattedMessages)
      } else {
        console.log("[Chat] No messages found for chat:", chatId)
        setMessages([])
      }
    } catch (error) {
      console.error("[Chat] Error loading messages:", error)
      setMessages([]) // Clear messages on error
    }
  }

  const createNewChat = async (firstMessage?: string) => {
    try {
      // Start with a placeholder title for immediate UI feedback
      const placeholderTitle = firstMessage ? "Generating title..." : `Chat ${new Date().toLocaleTimeString()}`
      console.log("[v0] Creating new chat with placeholder title:", placeholderTitle)

      const data = await makeGraphQLRequest(MUTATIONS.CREATE_CHAT, { title: placeholderTitle })
      const newChat = data.insert_chats_one

      setChats((prev) => [newChat, ...prev])
      setCurrentChatId(newChat.id)
      setMessages([])

      // Generate AI title in the background if we have a first message
      if (firstMessage && firstMessage.trim()) {
        generateChatTitleAsync(newChat.id, firstMessage)
      }

      return newChat.id
    } catch (error) {
      console.error("[v0] Error creating chat:", error)
      return null
    }
  }

  // Generate title asynchronously to avoid blocking UI
  const generateChatTitleAsync = async (chatId: string, firstMessage: string) => {
    try {
      console.log("[App] Starting async title generation for chat:", chatId)
      console.log("[App] First message:", firstMessage.substring(0, 50) + '...')
      
      const aiTitle = await generateChatTitle(firstMessage)
      console.log("[App] Generated AI title:", aiTitle)
      
      if (aiTitle && aiTitle !== "Generating title..." && aiTitle.trim() !== "") {
        console.log("[App] Updating chat title to:", aiTitle)
        await updateChatTitle(chatId, aiTitle)
      } else {
        console.log("[App] AI title generation returned empty or placeholder, using fallback")
        const fallbackTitle = firstMessage.length > 30 
          ? firstMessage.substring(0, 30) + "..."
          : firstMessage
        await updateChatTitle(chatId, fallbackTitle)
      }
    } catch (error) {
      console.error("[App] Error in async title generation:", error)
      // Use fallback title if AI generation fails
      const fallbackTitle = firstMessage.length > 30 
        ? firstMessage.substring(0, 30) + "..."
        : firstMessage
      await updateChatTitle(chatId, fallbackTitle)
    }
  }

  const updateChatTitle = async (chatId: string, title: string) => {
    try {
      console.log("[v0] Updating chat title:", title)
      await makeGraphQLRequest(MUTATIONS.UPDATE_CHAT_TITLE, { id: chatId, title })
      setChats((prev) => prev.map((chat) => (chat.id === chatId ? { ...chat, title } : chat)))
    } catch (error) {
      console.error("[v0] Error updating chat title:", error)
    }
  }

  const deleteChat = async (chatId: string) => {
    try {
      console.log("[v0] Deleting chat:", chatId)
      await makeGraphQLRequest(MUTATIONS.DELETE_CHAT, { id: chatId })
      
      // Remove chat from local state
      setChats((prev) => prev.filter((chat) => chat.id !== chatId))
      
      // If we deleted the current chat, clear the chat view
      if (currentChatId === chatId) {
        setCurrentChatId("")
        setMessages([])
      }
    } catch (error) {
      console.error("[v0] Error deleting chat:", error)
    }
  }

  const startEditingChat = (chatId: string, currentTitle: string) => {
    setEditingChatId(chatId)
    setEditingChatTitle(currentTitle)
  }

  const saveEditedChatTitle = async () => {
    if (!editingChatTitle.trim()) return
    
    await updateChatTitle(editingChatId, editingChatTitle.trim())
    setEditingChatId("")
    setEditingChatTitle("")
  }

  const cancelEditingChat = () => {
    setEditingChatId("")
    setEditingChatTitle("")
  }

  const showDeleteConfirmation = (chatId: string, chatTitle: string) => {
    setDeletingChatId(chatId)
    setDeletingChatTitle(chatTitle)
  }

  const confirmDeleteChat = async () => {
    if (deletingChatId) {
      await deleteChat(deletingChatId)
      setDeletingChatId("")
      setDeletingChatTitle("")
    }
  }

  const cancelDeleteChat = () => {
    setDeletingChatId("")
    setDeletingChatTitle("")
  }

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    setIsLoading(true)
    const userMessage = inputMessage.trim()
    setInputMessage("")

    // Create new chat if none selected
    let activeChatId = currentChatId
    if (!activeChatId) {
      const newChatId = await createNewChat(userMessage)
      if (!newChatId) {
        setIsLoading(false)
        return
      }
      activeChatId = newChatId
    }

    try {
      // First, save the user message to the database
      console.log("[Chat] Saving user message to database:", userMessage)
      const userMessageResult = await makeGraphQLRequest(MUTATIONS.INSERT_MESSAGE, {
        chat_id: activeChatId,
        content: userMessage,
        role: 'user'
      })

      console.log("[Chat] User message saved:", userMessageResult)

      // Add user message to UI with the ID from database
      let userMsg: Message
      if (userMessageResult.insert_messages_one) {
        userMsg = {
          id: userMessageResult.insert_messages_one.id,
          content: userMessageResult.insert_messages_one.content,
          role: userMessageResult.insert_messages_one.role,
          created_at: userMessageResult.insert_messages_one.created_at
        }
      } else {
        // Fallback if database insert fails
        userMsg = {
          id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          content: userMessage,
          role: "user",
          created_at: new Date().toISOString(),
        }
      }
      setMessages((prev) => [...prev, userMsg])

      // Then, get the bot response
      console.log("[v0] Getting bot response for:", userMessage)
      console.log("[v0] Using chat ID:", activeChatId)

      const query = `mutation SendMessage { sendMessage(chat_id: "${activeChatId}", message: "${userMessage.replace(/"/g, '\\"')}") { id chat_id content role created_at } }`

      const result = await makeGraphQLRequest(query)
      console.log("[v0] GraphQL response (direct data):", result)
      console.log("[v0] Result structure:", JSON.stringify(result, null, 2))

      // Since makeGraphQLRequest returns data directly, we access sendMessage directly
      console.log("[v0] About to access result.sendMessage")
      console.log("[v0] result.sendMessage exists:", !!result.sendMessage)

      // Add defensive checks
      if (!result || !result.sendMessage) {
        console.error("[v0] Missing sendMessage in result:", result)
        throw new Error("Invalid response structure from server")
      }

      const botResponse = result.sendMessage
      const cleanBotResponse = {
        ...botResponse,
        content: botResponse.content?.trim() || "",
      }

      setMessages((prev) => [...prev, cleanBotResponse])

      // Update chat title if it's auto-generated (async) OR if this is the first message
      const currentChat = chats.find((chat) => chat.id === activeChatId)
      if (currentChat) {
        // Auto-generate title if:
        // 1. The title is auto-generated (placeholder), OR
        // 2. This is the first real message (messages length = 2: user + bot)
        const shouldGenerateTitle = 
          isAutoGeneratedTitle(currentChat.title) || 
          messages.length === 1 // Only user message exists at this point
        
        if (shouldGenerateTitle) {
          console.log("[v0] Triggering AI title generation for first message")
          generateChatTitleAsync(activeChatId, userMessage)
        }
      }
    } catch (error) {
      console.error("[v0] Error sending message:", error)

      let errorMessage = "Sorry, there was an error sending your message. Please try again."

      if (
        typeof error === "object" &&
        error !== null &&
        "message" in error &&
        typeof (error as any).message === "string"
      ) {
        const msg = (error as any).message as string
        
        // Check for webhook-related errors
        if (
          msg.includes("not a valid json response from webhook") ||
          msg.includes("webhook") ||
          msg.includes("invalid JSON")
        ) {
          const fallbackMsg: Message = {
            id: `fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            content:
              "I apologize, but I'm currently experiencing technical difficulties with my response system. The webhook service that processes messages is returning empty responses. Please try again in a few moments, or contact support if the issue persists.\n\nIn the meantime, I'd be happy to help once the technical issue is resolved!",
            role: "assistant",
            created_at: new Date().toISOString(),
          }
          setMessages((prev) => [...prev, fallbackMsg])
          return
        } else if (msg.includes("network") || msg.includes("fetch")) {
          errorMessage = "Network connection issue. Please check your internet connection and try again."
        } else if (msg.includes("timeout")) {
          errorMessage = "The request timed out. Please try again with a shorter message."
        }
      }

      const errorMsg: Message = {
        id: `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        content: errorMessage,
        role: "assistant",
        created_at: new Date().toISOString(),
      }
      setMessages((prev) => [...prev, errorMsg])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      if (email && password) {
        console.log("[NHost] Attempting login for:", email)
        const result = await signInEmailPassword(email, password)
        console.log("[NHost] Login result:", result)
        
        if (result.isError) {
          console.error("[NHost] Login error:", result.error)
          alert(`Login failed: ${result.error?.message || 'Unknown error'}`)
          return
        }
        
        if (result.needsEmailVerification) {
          alert("Please verify your email address before signing in. Check your inbox for the verification link.")
          return
        }
        
        // Success - NHost handles authentication state automatically
        setEmail("")
        setPassword("")
      } else {
        alert("Please enter email and password")
      }
    } catch (error) {
      console.error("[v0] Login error:", error)
      alert("Login failed. Please try again.")
    }
  }

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      if (name && email && password) {
        console.log("[NHost] Attempting signup for:", email)
        const result = await signUpEmailPassword(email, password, {
          displayName: name,
          redirectTo: process.env.NEXT_PUBLIC_APP_URL || 'https://mouseai.netlify.app',
        })
        console.log("[NHost] Signup result:", result)
        
        if (result.isError) {
          console.error("[NHost] Signup error:", result.error)
          alert(`Signup failed: ${result.error?.message || 'Unknown error'}`)
          return
        }
        
        if (result.needsEmailVerification) {
          setShowSuccessModal(true)
        } else {
          alert("Account created successfully! You can now sign in.")
        }
        
        setIsLogin(true)
        setEmail("")
        setPassword("")
        setName("")
      } else {
        alert("Please fill in all fields")
      }
    } catch (error) {
      console.error("[v0] Signup error:", error)
      alert("Signup failed. Please try again.")
    }
  }

  const handleLogout = async () => {
    await signOut()
    setMessages([])
    setChats([])
    setCurrentChatId("")
    setEmail("")
    setPassword("")
    setName("")
  }

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
    if (typeof window !== 'undefined') {
      document.documentElement.classList.toggle('dark', !isDarkMode)
    }
  }

  // Initialize theme from localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedTheme = localStorage.getItem('theme')
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches
      const shouldBeDark = savedTheme === 'dark' || (!savedTheme && prefersDark)
      
      setIsDarkMode(shouldBeDark)
      document.documentElement.classList.toggle('dark', shouldBeDark)
    }
  }, [])

  // Save theme to localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('theme', isDarkMode ? 'dark' : 'light')
    }
  }, [isDarkMode])

  // Prevent hydration issues by not rendering until mounted
  if (!mounted) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Initializing...</p>
        </div>
      </div>
    )
  }

  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading...</p>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return (
      <>
        <div className="min-h-screen relative overflow-hidden" style={{ background: '#ffffff' }}>
          {/* Subtle dotted background pattern - Behind everything */}
          <div 
            className="absolute inset-0 z-0"
            style={{
              background: `
                radial-gradient(circle, #e5e7eb 0.8px, transparent 0.8px)
              `,
              backgroundSize: '18px 18px',
              backgroundPosition: '0 0'
            }}
          />
          
          {/* Header */}
          <div className="absolute top-0 left-0 right-0 z-30 bg-white/95 backdrop-blur-md border-b border-gray-200">
            <div className="flex items-center justify-between p-6">
              {/* Logo and Brand */}
              <div className="flex items-center gap-3">
                <Image
                  src="/mouse3-nobg.png"
                  alt="MouseAI"
                  width={32}
                  height={32}
                  className="w-8 h-8 object-contain"
                  onError={(e) => {
                    e.currentTarget.style.display = 'none';
                  }}
                />
                <h1 className="text-xl font-bold text-gray-900 dark:text-black">MouseAI</h1>
              </div>
              
              {/* Documentation Button */}
              <Link href="/docs">
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="w-12 h-12 rounded-full hover:bg-muted transition-colors"
                  title="Documentation"
                >
                  <FileText className="w-6 h-6 text-gray-900 dark:text-black" />
                </Button>
              </Link>
            </div>
          </div>

          <div className="flex min-h-screen items-center relative z-10">
            {/* Left Side - Content */}
            <div className="flex-1 flex items-center justify-center p-8">
              <div className="max-w-md space-y-6">
                <div className="space-y-4">
                  <h2 className="text-4xl font-bold leading-tight text-gray-900 dark:text-black">
                    AI-Powered Intelligence at Your Fingertips
                  </h2>
                  <p className="text-lg text-muted-foreground leading-relaxed">
                    Experience the next generation of AI assistance with MouseAI. Smart, fast, and intuitive AI that adapts to your workflow.
                  </p>
                </div>
                
                <div className="space-y-4">
                  <div className="flex items-center gap-3">
                    <Brain className="w-5 h-5 text-primary" />
                    <span className="text-sm">Intelligent conversation understanding</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <Sparkles className="w-5 h-5 text-primary" />
                    <span className="text-sm">Real-time responses</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <MessageCircle className="w-5 h-5 text-primary" />
                    <span className="text-sm">Seamless chat experience</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Right Side - Login Form */}
            <div className="flex-1 flex items-center justify-center p-8">
              <div className="w-full max-w-md">
                {/* Success Modal */}
                {showSuccessModal && (
                  <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                    <div className="bg-background/95 backdrop-blur-md border rounded-lg p-6 max-w-md mx-4 shadow-lg relative z-60">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full bg-green-100 dark:bg-green-900/20 flex items-center justify-center">
                            <CheckCircle className="w-6 h-6 text-green-600 dark:text-green-400" />
                          </div>
                          <h3 className="text-lg font-semibold">Account Created!</h3>
                        </div>
                        <Button 
                          variant="ghost" 
                          size="icon"
                          onClick={() => setShowSuccessModal(false)}
                          className="h-8 w-8"
                        >
                          <X className="w-4 h-4" />
                        </Button>
                      </div>
                      <div className="space-y-3">
                        <p className="text-muted-foreground">
                          Your account has been created successfully! Please check your email to verify your account before signing in.
                        </p>
                        <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md p-3">
                          <p className="text-sm text-blue-800 dark:text-blue-200">
                            💡 <strong>Tip:</strong> Don't forget to check your spam folder if you don't see the verification email.
                          </p>
                        </div>
                      </div>
                      <div className="flex justify-end mt-6">
                        <Button onClick={() => setShowSuccessModal(false)} className="px-6">
                          Got it!
                        </Button>
                      </div>
                    </div>
                  </div>
                )}
                
                <Card className="backdrop-blur-lg bg-background/90 border border-border/50 shadow-2xl">
                  <CardHeader>
                    <CardTitle className="text-center">{isLogin ? "Login to Chat" : "Create Account"}</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={isLogin ? handleLogin : handleSignup} className="space-y-4">
                      {!isLogin && (
                        <div>
                          <label className="text-sm font-medium">Name</label>
                          <Input
                            type="text"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            placeholder="Enter your name"
                            required={!isLogin}
                          />
                        </div>
                      )}
                      <div>
                        <label className="text-sm font-medium">Email</label>
                        <Input
                          type="email"
                          value={email}
                          onChange={(e) => setEmail(e.target.value)}
                          placeholder="Enter your email"
                          required
                        />
                      </div>
                      <div>
                        <label className="text-sm font-medium">Password</label>
                        <Input
                          type="password"
                          value={password}
                          onChange={(e) => setPassword(e.target.value)}
                          placeholder="Enter your password"
                          required
                        />
                      </div>
                      
                      {/* Display errors */}
                      {signInError && isLogin && (
                        <div className="text-red-500 text-sm">{signInError.message}</div>
                      )}
                      {signUpError && !isLogin && (
                        <div className="text-red-500 text-sm">{signUpError.message}</div>
                      )}
                      
                      <Button 
                        type="submit" 
                        className="w-full" 
                        disabled={isLogin ? signInLoading : signUpLoading}
                      >
                        {isLogin ? (signInLoading ? "Signing in..." : "Login") : (signUpLoading ? "Creating account..." : "Sign Up")}
                      </Button>
                    </form>
                    <div className="mt-4 text-center">
                      <Button variant="link" onClick={() => setIsLogin(!isLogin)} className="text-sm">
                        {isLogin ? "Don't have an account? Sign up" : "Already have an account? Login"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
          
          {/* MouseAI Running Animation at bottom of screen - Above dots, below content */}
          <div className="relative z-20">
            <MouseRunningAnimation />
          </div>
        </div>
      </>
    )
  }

  return (
    <>
      {/* Delete Confirmation Modal */}
      {deletingChatId && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
          <div className="bg-background/95 backdrop-blur-md border rounded-lg p-6 max-w-md mx-4 shadow-lg relative z-60">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-full bg-red-100 dark:bg-red-900/20 flex items-center justify-center">
                  <Trash2 className="w-6 h-6 text-red-600 dark:text-red-400" />
                </div>
                <h3 className="text-lg font-semibold">Delete Chat</h3>
              </div>
              <Button 
                variant="ghost" 
                size="icon"
                onClick={cancelDeleteChat}
                className="h-8 w-8"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
            <div className="space-y-3">
              <p className="text-muted-foreground">
                Are you sure you want to delete this chat?
              </p>
              <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-md p-3">
                <p className="text-sm text-amber-800 dark:text-amber-200">
                  <strong>"{deletingChatTitle}"</strong>
                </p>
                <p className="text-xs text-amber-700 dark:text-amber-300 mt-1">
                  ⚠️ This action cannot be undone. All messages in this chat will be permanently deleted.
                </p>
              </div>
            </div>
            <div className="flex justify-end gap-2 mt-6">
              <Button 
                variant="outline" 
                onClick={cancelDeleteChat}
                className="px-4"
              >
                Cancel
              </Button>
              <Button 
                variant="destructive" 
                onClick={confirmDeleteChat}
                className="px-4"
              >
                Delete Chat
              </Button>
            </div>
          </div>
        </div>
      )}

      <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <div className="w-80 border-r bg-card flex flex-col">
        <div className="p-4 border-b">
          <div className="flex justify-between items-center mb-4">
            <h2 className="font-semibold">mouseAI</h2>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon" onClick={toggleTheme} title="Toggle Theme">
                {isDarkMode ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
              </Button>
            </div>
          </div>
          <Button onClick={() => createNewChat()} className="w-full">
            <MessageCircle className="w-4 h-4 mr-2" />
            New Chat
          </Button>
        </div>
        <ScrollArea className="flex-1">
          <div className="p-2">
            {chats.map((chat) => (
              <div
                key={chat.id}
                className={`group relative mb-1 rounded-md hover:bg-accent ${
                  currentChatId === chat.id ? 'bg-secondary' : ''
                }`}
              >
                {editingChatId === chat.id ? (
                  // Edit mode
                  <div className="flex items-center gap-2 p-3">
                    <Input
                      value={editingChatTitle}
                      onChange={(e) => setEditingChatTitle(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          saveEditedChatTitle()
                        } else if (e.key === 'Escape') {
                          cancelEditingChat()
                        }
                      }}
                      className="flex-1 h-8"
                      autoFocus
                    />
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={saveEditedChatTitle}
                      className="h-8 w-8 p-0"
                    >
                      <CheckCircle className="h-4 w-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={cancelEditingChat}
                      className="h-8 w-8 p-0"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ) : (
                  // Normal mode
                  <div className="flex items-center">
                    <Button
                      variant="ghost"
                      className="flex-1 justify-start h-auto p-3 text-left"
                      onClick={() => {
                        setCurrentChatId(chat.id)
                        loadMessages(chat.id)
                      }}
                    >
                      <div className="flex-1">
                        <div className="font-medium truncate flex items-center gap-2">
                          {chat.title}
                          {chat.title === "Generating title..." && (
                            <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-primary"></div>
                          )}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {new Date(chat.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    </Button>
                    
                    {/* Action buttons - shown on hover */}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1 pr-2">
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={(e) => {
                          e.stopPropagation()
                          startEditingChat(chat.id, chat.title)
                        }}
                        className="h-8 w-8 p-0"
                        title="Edit chat name"
                      >
                        <Edit2 className="h-3 w-3" />
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={(e) => {
                          e.stopPropagation()
                          showDeleteConfirmation(chat.id, chat.title)
                        }}
                        className="h-8 w-8 p-0 text-destructive hover:text-destructive"
                        title="Delete chat"
                      >
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>
        
        {/* User info at bottom */}
        <div className="p-4 border-t">
          <div className="flex items-center gap-3">
            <div className="w-8 h-8 rounded-full bg-primary flex items-center justify-center">
              <span className="text-primary-foreground font-medium text-sm">
                {user?.displayName?.charAt(0).toUpperCase() || user?.email?.charAt(0).toUpperCase() || 'U'}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <div className="text-sm font-bold truncate">
                {user?.displayName || user?.email?.split('@')[0] || 'User'}
              </div>
              <div className="text-xs text-muted-foreground truncate">
                {user?.email}
              </div>
            </div>
            <Button variant="ghost" size="icon" onClick={handleLogout} title="Logout" className="ml-2">
              <LogOut className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Main chat area */}
      <div className="flex-1 flex flex-col">
        {currentChatId ? (
          <>
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <MessageBubble key={message.id} message={message} />
                ))}
                {isLoading && <TypingIndicator />}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            <div className="border-t p-4">
              <div className="flex gap-2">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Type your message..."
                  disabled={isLoading}
                  className="flex-1"
                />
                <Button onClick={sendMessage} disabled={isLoading || !inputMessage.trim()} size="icon">
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center max-w-4xl mx-auto px-8">
              {/* Main branding */}
              <div className="mb-12">
                <div className="w-16 h-16 mx-auto mb-6 rounded-2xl bg-primary flex items-center justify-center">
                  <MessageCircle className="w-8 h-8 text-primary-foreground" />
                </div>
                <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
                  mouseAI
                </h1>
                <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
                  Your intelligent AI companion for conversations, creativity, and problem-solving. Start a new chat to begin your journey.
                </p>
              </div>

              {/* Feature cards */}
              <div className="grid md:grid-cols-3 gap-6 mb-12">
                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <MessageSquare className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Natural Conversations</h3>
                    <p className="text-muted-foreground text-sm">
                      Chat naturally with advanced AI that understands context and nuance
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <Sparkles className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Creative Solutions</h3>
                    <p className="text-muted-foreground text-sm">
                      Get help with creative writing, brainstorming, and problem-solving
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-2 border-border/50 hover:border-primary/50 transition-colors">
                  <CardContent className="p-6 text-center">
                    <Brain className="w-12 h-12 mx-auto mb-4 text-primary" />
                    <h3 className="text-lg font-semibold mb-2">Intelligent Responses</h3>
                    <p className="text-muted-foreground text-sm">
                      Receive thoughtful, accurate responses powered by cutting-edge AI
                    </p>
                  </CardContent>
                </Card>
              </div>

              {/* Start conversation button */}
              <Button size="lg" onClick={() => createNewChat()} className="px-8 py-3 text-lg">
                Start New Conversation
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
    </>
  )
}
