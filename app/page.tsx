"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { useAuthenticationStatus, useUserData, useSignInEmailPassword, useSignUpEmailPassword, useSignOut } from "@nhost/react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Send, MessageCircle, LogOut } from "lucide-react"

import { STORAGE_KEYS } from "@/lib/constants"
import { makeGraphQLRequest, QUERIES, MUTATIONS } from "@/lib/graphql"
import { generateChatTitle, isAutoGeneratedTitle } from "@/lib/utils/chat"
import { MessageBubble } from "@/components/chat/message-bubble"
import { TypingIndicator } from "@/components/chat/typing-indicator"
import type { Message, Chat } from "@/lib/types"

export default function ChatApp() {
  const [messages, setMessages] = useState<Message[]>([])
  const [chats, setChats] = useState<Chat[]>([])
  const [currentChatId, setCurrentChatId] = useState<string>("")
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [mounted, setMounted] = useState(false)

  // NHost authentication
  const { isAuthenticated, isLoading: authLoading } = useAuthenticationStatus()
  const user = useUserData()
  const { signInEmailPassword, isLoading: signInLoading, error: signInError } = useSignInEmailPassword()
  const { signUpEmailPassword, isLoading: signUpLoading, error: signUpError } = useSignUpEmailPassword()
  const { signOut } = useSignOut()

  // Form state
  const [isLogin, setIsLogin] = useState(true)
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [name, setName] = useState("")

  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Fix hydration by ensuring client-side only rendering after mount
  useEffect(() => {
    setMounted(true)
  }, [])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  useEffect(() => {
    if (isAuthenticated && user) {
      console.log("[NHost] User authenticated:", user)
      loadChats()
    }
  }, [isAuthenticated, user])

  // Debug NHost connection
  useEffect(() => {
    console.log("[NHost] Client configuration:")
    console.log("- Subdomain:", process.env.NEXT_PUBLIC_NHOST_SUBDOMAIN)
    console.log("- Region:", process.env.NEXT_PUBLIC_NHOST_REGION)
    console.log("- Auth status:", isAuthenticated)
    console.log("- Auth loading:", authLoading)
    
    if (signInError) {
      console.error("[NHost] Sign in error:", signInError)
    }
    if (signUpError) {
      console.error("[NHost] Sign up error:", signUpError)
    }
  }, [isAuthenticated, authLoading, signInError, signUpError])

  const loadChats = async () => {
    try {
      console.log("[v0] Loading chats...")
      const data = await makeGraphQLRequest(QUERIES.GET_CHATS)
      setChats(data.chats)

      if (!currentChatId && data.chats.length > 0) {
        setCurrentChatId(data.chats[0].id)
        loadMessages(data.chats[0].id)
      }
    } catch (error) {
      console.error("[v0] Error loading chats:", error)
    }
  }

  const loadMessages = async (chatId: string) => {
    try {
      console.log("[v0] Loading messages for chat:", chatId)
      const data = await makeGraphQLRequest(QUERIES.GET_MESSAGES, { chat_id: chatId })
      setMessages(data.messages)
    } catch (error) {
      console.error("[v0] Error loading messages:", error)
    }
  }

  const createNewChat = async (firstMessage?: string) => {
    try {
      // Start with a placeholder title for immediate UI feedback
      const placeholderTitle = firstMessage ? "Generating title..." : `Chat ${new Date().toLocaleTimeString()}`
      console.log("[v0] Creating new chat with placeholder title:", placeholderTitle)

      const data = await makeGraphQLRequest(MUTATIONS.CREATE_CHAT, { title: placeholderTitle })
      const newChat = data.insert_chats_one

      setChats((prev) => [newChat, ...prev])
      setCurrentChatId(newChat.id)
      setMessages([])

      // Generate AI title in the background if we have a first message
      if (firstMessage && firstMessage.trim()) {
        generateChatTitleAsync(newChat.id, firstMessage)
      }

      return newChat.id
    } catch (error) {
      console.error("[v0] Error creating chat:", error)
      return null
    }
  }

  // Generate title asynchronously to avoid blocking UI
  const generateChatTitleAsync = async (chatId: string, firstMessage: string) => {
    try {
      console.log("[App] Starting async title generation for chat:", chatId)
      console.log("[App] First message:", firstMessage.substring(0, 50) + '...')
      
      const aiTitle = await generateChatTitle(firstMessage)
      console.log("[App] Generated AI title:", aiTitle)
      
      if (aiTitle && aiTitle !== "Generating title..." && aiTitle.trim() !== "") {
        console.log("[App] Updating chat title to:", aiTitle)
        await updateChatTitle(chatId, aiTitle)
      } else {
        console.log("[App] AI title generation returned empty or placeholder, using fallback")
        const fallbackTitle = firstMessage.length > 30 
          ? firstMessage.substring(0, 30) + "..."
          : firstMessage
        await updateChatTitle(chatId, fallbackTitle)
      }
    } catch (error) {
      console.error("[App] Error in async title generation:", error)
      // Use fallback title if AI generation fails
      const fallbackTitle = firstMessage.length > 30 
        ? firstMessage.substring(0, 30) + "..."
        : firstMessage
      await updateChatTitle(chatId, fallbackTitle)
    }
  }

  const updateChatTitle = async (chatId: string, title: string) => {
    try {
      console.log("[v0] Updating chat title:", title)
      await makeGraphQLRequest(MUTATIONS.UPDATE_CHAT_TITLE, { id: chatId, title })
      setChats((prev) => prev.map((chat) => (chat.id === chatId ? { ...chat, title } : chat)))
    } catch (error) {
      console.error("[v0] Error updating chat title:", error)
    }
  }

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    setIsLoading(true)
    const userMessage = inputMessage.trim()
    setInputMessage("")

    // Create new chat if none selected
    let activeChatId = currentChatId
    if (!activeChatId) {
      const newChatId = await createNewChat(userMessage)
      if (!newChatId) {
        setIsLoading(false)
        return
      }
      activeChatId = newChatId
    }

    // Add user message to UI with guaranteed unique ID
    const userMsg: Message = {
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      content: userMessage,
      role: "user",
      created_at: new Date().toISOString(),
    }
    setMessages((prev) => [...prev, userMsg])

    try {
      console.log("[v0] Sending message:", userMessage)
      console.log("[v0] Using chat ID:", activeChatId)

      const query = `mutation SendMessage { sendMessage(chat_id: "${activeChatId}", message: "${userMessage.replace(/"/g, '\\"')}") { id chat_id content role created_at } }`

      const result = await makeGraphQLRequest(query)
      console.log("[v0] GraphQL response (direct data):", result)
      console.log("[v0] Result structure:", JSON.stringify(result, null, 2))

      // Since makeGraphQLRequest returns data directly, we access sendMessage directly
      console.log("[v0] About to access result.sendMessage")
      console.log("[v0] result.sendMessage exists:", !!result.sendMessage)

      // Add defensive checks
      if (!result || !result.sendMessage) {
        console.error("[v0] Missing sendMessage in result:", result)
        throw new Error("Invalid response structure from server")
      }

      const botResponse = result.sendMessage
      const cleanBotResponse = {
        ...botResponse,
        content: botResponse.content?.trim() || "",
      }

      setMessages((prev) => [...prev, cleanBotResponse])

      // Update chat title if it's auto-generated (async)
      const currentChat = chats.find((chat) => chat.id === activeChatId)
      if (currentChat && isAutoGeneratedTitle(currentChat.title)) {
        generateChatTitleAsync(activeChatId, userMessage)
      }
    } catch (error) {
      console.error("[v0] Error sending message:", error)

      let errorMessage = "Sorry, there was an error sending your message. Please try again."

      if (
        typeof error === "object" &&
        error !== null &&
        "message" in error &&
        typeof (error as any).message === "string"
      ) {
        const msg = (error as any).message as string
        
        // Check for webhook-related errors
        if (
          msg.includes("not a valid json response from webhook") ||
          msg.includes("webhook") ||
          msg.includes("invalid JSON")
        ) {
          const fallbackMsg: Message = {
            id: `fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            content:
              "I apologize, but I'm currently experiencing technical difficulties with my response system. The webhook service that processes messages is returning empty responses. Please try again in a few moments, or contact support if the issue persists.\n\nIn the meantime, I'd be happy to help once the technical issue is resolved!",
            role: "assistant",
            created_at: new Date().toISOString(),
          }
          setMessages((prev) => [...prev, fallbackMsg])
          return
        } else if (msg.includes("network") || msg.includes("fetch")) {
          errorMessage = "Network connection issue. Please check your internet connection and try again."
        } else if (msg.includes("timeout")) {
          errorMessage = "The request timed out. Please try again with a shorter message."
        }
      }

      const errorMsg: Message = {
        id: `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        content: errorMessage,
        role: "assistant",
        created_at: new Date().toISOString(),
      }
      setMessages((prev) => [...prev, errorMsg])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      if (email && password) {
        console.log("[NHost] Attempting login for:", email)
        const result = await signInEmailPassword(email, password)
        console.log("[NHost] Login result:", result)
        
        if (result.isError) {
          console.error("[NHost] Login error:", result.error)
          alert(`Login failed: ${result.error?.message || 'Unknown error'}`)
          return
        }
        
        if (result.needsEmailVerification) {
          alert("Please verify your email address before signing in. Check your inbox for the verification link.")
          return
        }
        
        // Success - NHost handles authentication state automatically
        setEmail("")
        setPassword("")
      } else {
        alert("Please enter email and password")
      }
    } catch (error) {
      console.error("[v0] Login error:", error)
      alert("Login failed. Please try again.")
    }
  }

  const handleSignup = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      if (name && email && password) {
        console.log("[NHost] Attempting signup for:", email)
        const result = await signUpEmailPassword(email, password, {
          displayName: name,
        })
        console.log("[NHost] Signup result:", result)
        
        if (result.isError) {
          console.error("[NHost] Signup error:", result.error)
          alert(`Signup failed: ${result.error?.message || 'Unknown error'}`)
          return
        }
        
        if (result.needsEmailVerification) {
          alert("Account created! Please check your email to verify your account before signing in.")
        } else {
          alert("Account created successfully! You can now sign in.")
        }
        
        setIsLogin(true)
        setEmail("")
        setPassword("")
        setName("")
      } else {
        alert("Please fill in all fields")
      }
    } catch (error) {
      console.error("[v0] Signup error:", error)
      alert("Signup failed. Please try again.")
    }
  }

  const handleLogout = async () => {
    await signOut()
    setMessages([])
    setChats([])
    setCurrentChatId("")
    setEmail("")
    setPassword("")
    setName("")
  }

  // Prevent hydration issues by not rendering until mounted
  if (!mounted) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Initializing...</p>
        </div>
      </div>
    )
  }

  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading...</p>
        </div>
      </div>
    )
  }

  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-background">
        <Card className="w-96">
          <CardHeader>
            <CardTitle className="text-center">{isLogin ? "Login to Chat" : "Create Account"}</CardTitle>
          </CardHeader>
          <CardContent>
            <form onSubmit={isLogin ? handleLogin : handleSignup} className="space-y-4">
              {!isLogin && (
                <div>
                  <label className="text-sm font-medium">Name</label>
                  <Input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    placeholder="Enter your name"
                    required={!isLogin}
                  />
                </div>
              )}
              <div className="mb-8 text-center">
                <h1 className="text-3xl font-bold tracking-tight text-primary">mouse</h1>
                <p className="text-muted-foreground text-sm mt-2">Welcome to mouse. Please log in to continue.</p>
              </div>
              <div>
                <label className="text-sm font-medium">Email</label>
                <Input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Enter your email"
                  required
                />
              </div>
              <div>
                <label className="text-sm font-medium">Password</label>
                <Input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Enter your password"
                  required
                />
              </div>
              
              {/* Display errors */}
              {signInError && isLogin && (
                <div className="text-red-500 text-sm">{signInError.message}</div>
              )}
              {signUpError && !isLogin && (
                <div className="text-red-500 text-sm">{signUpError.message}</div>
              )}
              
              <Button 
                type="submit" 
                className="w-full" 
                disabled={isLogin ? signInLoading : signUpLoading}
              >
                {isLogin ? (signInLoading ? "Signing in..." : "Login") : (signUpLoading ? "Creating account..." : "Sign Up")}
              </Button>
            </form>
            <div className="mt-4 text-center">
              <Button variant="link" onClick={() => setIsLogin(!isLogin)} className="text-sm">
                {isLogin ? "Don't have an account? Sign up" : "Already have an account? Login"}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="flex h-screen bg-background">
      {/* Sidebar */}
      <div className="w-80 border-r bg-card">
        <div className="p-4 border-b">
          <div className="flex justify-between items-center mb-4">
            <h2 className="font-semibold">Chat History</h2>
            <Button variant="ghost" size="icon" onClick={handleLogout} title="Logout">
              <LogOut className="w-4 h-4" />
            </Button>
          </div>
          <Button onClick={() => createNewChat()} className="w-full">
            <MessageCircle className="w-4 h-4 mr-2" />
            New Chat
          </Button>
        </div>
        <ScrollArea className="flex-1">
          <div className="p-2">
            {chats.map((chat) => (
              <Button
                key={chat.id}
                variant={currentChatId === chat.id ? "secondary" : "ghost"}
                className="w-full justify-start mb-1 h-auto p-3"
                onClick={() => {
                  setCurrentChatId(chat.id)
                  loadMessages(chat.id)
                }}
              >
                <div className="text-left flex-1">
                  <div className="font-medium truncate flex items-center gap-2">
                    {chat.title}
                    {chat.title === "Generating title..." && (
                      <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-primary"></div>
                    )}
                  </div>
                  <div className="text-xs text-muted-foreground">{new Date(chat.created_at).toLocaleDateString()}</div>
                </div>
              </Button>
            ))}
          </div>
        </ScrollArea>
      </div>

      {/* Main chat area */}
      <div className="flex-1 flex flex-col">
        {currentChatId ? (
          <>
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <MessageBubble key={message.id} message={message} />
                ))}
                {isLoading && <TypingIndicator />}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            <div className="border-t p-4">
              <div className="flex gap-2">
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Type your message..."
                  disabled={isLoading}
                  className="flex-1"
                />
                <Button onClick={sendMessage} disabled={isLoading || !inputMessage.trim()} size="icon">
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center">
              <MessageCircle className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
              <h3 className="text-lg font-medium mb-2">No Chat Selected</h3>
              <p className="text-muted-foreground">Create a new chat or select an existing one to start messaging.</p>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
